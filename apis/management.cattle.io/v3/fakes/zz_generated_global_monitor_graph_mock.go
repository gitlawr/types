// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockGlobalMonitorGraphListerMockGet  sync.RWMutex
	lockGlobalMonitorGraphListerMockList sync.RWMutex
)

// Ensure, that GlobalMonitorGraphListerMock does implement GlobalMonitorGraphLister.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalMonitorGraphLister = &GlobalMonitorGraphListerMock{}

// GlobalMonitorGraphListerMock is a mock implementation of GlobalMonitorGraphLister.
//
//     func TestSomethingThatUsesGlobalMonitorGraphLister(t *testing.T) {
//
//         // make and configure a mocked GlobalMonitorGraphLister
//         mockedGlobalMonitorGraphLister := &GlobalMonitorGraphListerMock{
//             GetFunc: func(namespace string, name string) (*v3.GlobalMonitorGraph, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.GlobalMonitorGraph, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedGlobalMonitorGraphLister in code that requires GlobalMonitorGraphLister
//         // and then make assertions.
//
//     }
type GlobalMonitorGraphListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.GlobalMonitorGraph, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.GlobalMonitorGraph, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *GlobalMonitorGraphListerMock) Get(namespace string, name string) (*v3.GlobalMonitorGraph, error) {
	if mock.GetFunc == nil {
		panic("GlobalMonitorGraphListerMock.GetFunc: method is nil but GlobalMonitorGraphLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGlobalMonitorGraphListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGlobalMonitorGraphListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGlobalMonitorGraphLister.GetCalls())
func (mock *GlobalMonitorGraphListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGlobalMonitorGraphListerMockGet.RLock()
	calls = mock.calls.Get
	lockGlobalMonitorGraphListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GlobalMonitorGraphListerMock) List(namespace string, selector labels.Selector) ([]*v3.GlobalMonitorGraph, error) {
	if mock.ListFunc == nil {
		panic("GlobalMonitorGraphListerMock.ListFunc: method is nil but GlobalMonitorGraphLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockGlobalMonitorGraphListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGlobalMonitorGraphListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGlobalMonitorGraphLister.ListCalls())
func (mock *GlobalMonitorGraphListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockGlobalMonitorGraphListerMockList.RLock()
	calls = mock.calls.List
	lockGlobalMonitorGraphListerMockList.RUnlock()
	return calls
}

var (
	lockGlobalMonitorGraphControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockGlobalMonitorGraphControllerMockAddClusterScopedHandler        sync.RWMutex
	lockGlobalMonitorGraphControllerMockAddFeatureHandler              sync.RWMutex
	lockGlobalMonitorGraphControllerMockAddHandler                     sync.RWMutex
	lockGlobalMonitorGraphControllerMockEnqueue                        sync.RWMutex
	lockGlobalMonitorGraphControllerMockGeneric                        sync.RWMutex
	lockGlobalMonitorGraphControllerMockInformer                       sync.RWMutex
	lockGlobalMonitorGraphControllerMockLister                         sync.RWMutex
	lockGlobalMonitorGraphControllerMockStart                          sync.RWMutex
	lockGlobalMonitorGraphControllerMockSync                           sync.RWMutex
)

// Ensure, that GlobalMonitorGraphControllerMock does implement GlobalMonitorGraphController.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalMonitorGraphController = &GlobalMonitorGraphControllerMock{}

// GlobalMonitorGraphControllerMock is a mock implementation of GlobalMonitorGraphController.
//
//     func TestSomethingThatUsesGlobalMonitorGraphController(t *testing.T) {
//
//         // make and configure a mocked GlobalMonitorGraphController
//         mockedGlobalMonitorGraphController := &GlobalMonitorGraphControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.GlobalMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.GlobalMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.GlobalMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.GlobalMonitorGraphLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedGlobalMonitorGraphController in code that requires GlobalMonitorGraphController
//         // and then make assertions.
//
//     }
type GlobalMonitorGraphControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.GlobalMonitorGraphHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.GlobalMonitorGraphHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalMonitorGraphHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.GlobalMonitorGraphHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.GlobalMonitorGraphLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.GlobalMonitorGraphHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.GlobalMonitorGraphHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.GlobalMonitorGraphHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.GlobalMonitorGraphHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *GlobalMonitorGraphControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.GlobalMonitorGraphHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("GlobalMonitorGraphControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but GlobalMonitorGraphController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.GlobalMonitorGraphHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockGlobalMonitorGraphControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockGlobalMonitorGraphControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedGlobalMonitorGraphController.AddClusterScopedFeatureHandlerCalls())
func (mock *GlobalMonitorGraphControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.GlobalMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.GlobalMonitorGraphHandlerFunc
	}
	lockGlobalMonitorGraphControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockGlobalMonitorGraphControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *GlobalMonitorGraphControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.GlobalMonitorGraphHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("GlobalMonitorGraphControllerMock.AddClusterScopedHandlerFunc: method is nil but GlobalMonitorGraphController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.GlobalMonitorGraphHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockGlobalMonitorGraphControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockGlobalMonitorGraphControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedGlobalMonitorGraphController.AddClusterScopedHandlerCalls())
func (mock *GlobalMonitorGraphControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.GlobalMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.GlobalMonitorGraphHandlerFunc
	}
	lockGlobalMonitorGraphControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockGlobalMonitorGraphControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *GlobalMonitorGraphControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.GlobalMonitorGraphHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("GlobalMonitorGraphControllerMock.AddFeatureHandlerFunc: method is nil but GlobalMonitorGraphController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalMonitorGraphHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockGlobalMonitorGraphControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockGlobalMonitorGraphControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedGlobalMonitorGraphController.AddFeatureHandlerCalls())
func (mock *GlobalMonitorGraphControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.GlobalMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalMonitorGraphHandlerFunc
	}
	lockGlobalMonitorGraphControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockGlobalMonitorGraphControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *GlobalMonitorGraphControllerMock) AddHandler(ctx context.Context, name string, handler v3.GlobalMonitorGraphHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("GlobalMonitorGraphControllerMock.AddHandlerFunc: method is nil but GlobalMonitorGraphController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.GlobalMonitorGraphHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGlobalMonitorGraphControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockGlobalMonitorGraphControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedGlobalMonitorGraphController.AddHandlerCalls())
func (mock *GlobalMonitorGraphControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.GlobalMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.GlobalMonitorGraphHandlerFunc
	}
	lockGlobalMonitorGraphControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockGlobalMonitorGraphControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *GlobalMonitorGraphControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("GlobalMonitorGraphControllerMock.EnqueueFunc: method is nil but GlobalMonitorGraphController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGlobalMonitorGraphControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockGlobalMonitorGraphControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedGlobalMonitorGraphController.EnqueueCalls())
func (mock *GlobalMonitorGraphControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGlobalMonitorGraphControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockGlobalMonitorGraphControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *GlobalMonitorGraphControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("GlobalMonitorGraphControllerMock.GenericFunc: method is nil but GlobalMonitorGraphController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalMonitorGraphControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockGlobalMonitorGraphControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedGlobalMonitorGraphController.GenericCalls())
func (mock *GlobalMonitorGraphControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalMonitorGraphControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockGlobalMonitorGraphControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *GlobalMonitorGraphControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("GlobalMonitorGraphControllerMock.InformerFunc: method is nil but GlobalMonitorGraphController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalMonitorGraphControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockGlobalMonitorGraphControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedGlobalMonitorGraphController.InformerCalls())
func (mock *GlobalMonitorGraphControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalMonitorGraphControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockGlobalMonitorGraphControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *GlobalMonitorGraphControllerMock) Lister() v3.GlobalMonitorGraphLister {
	if mock.ListerFunc == nil {
		panic("GlobalMonitorGraphControllerMock.ListerFunc: method is nil but GlobalMonitorGraphController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalMonitorGraphControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockGlobalMonitorGraphControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedGlobalMonitorGraphController.ListerCalls())
func (mock *GlobalMonitorGraphControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalMonitorGraphControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockGlobalMonitorGraphControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *GlobalMonitorGraphControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("GlobalMonitorGraphControllerMock.StartFunc: method is nil but GlobalMonitorGraphController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockGlobalMonitorGraphControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockGlobalMonitorGraphControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedGlobalMonitorGraphController.StartCalls())
func (mock *GlobalMonitorGraphControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockGlobalMonitorGraphControllerMockStart.RLock()
	calls = mock.calls.Start
	lockGlobalMonitorGraphControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *GlobalMonitorGraphControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("GlobalMonitorGraphControllerMock.SyncFunc: method is nil but GlobalMonitorGraphController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockGlobalMonitorGraphControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockGlobalMonitorGraphControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedGlobalMonitorGraphController.SyncCalls())
func (mock *GlobalMonitorGraphControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockGlobalMonitorGraphControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockGlobalMonitorGraphControllerMockSync.RUnlock()
	return calls
}

var (
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockAddFeatureHandler                sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockAddHandler                       sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockAddLifecycle                     sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockController                       sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockCreate                           sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockDelete                           sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockDeleteCollection                 sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockGet                              sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockGetNamespaced                    sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockList                             sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockObjectClient                     sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockUpdate                           sync.RWMutex
	lockGlobalMonitorGraphInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that GlobalMonitorGraphInterfaceMock does implement GlobalMonitorGraphInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalMonitorGraphInterface = &GlobalMonitorGraphInterfaceMock{}

// GlobalMonitorGraphInterfaceMock is a mock implementation of GlobalMonitorGraphInterface.
//
//     func TestSomethingThatUsesGlobalMonitorGraphInterface(t *testing.T) {
//
//         // make and configure a mocked GlobalMonitorGraphInterface
//         mockedGlobalMonitorGraphInterface := &GlobalMonitorGraphInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.GlobalMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.GlobalMonitorGraphLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.GlobalMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.GlobalMonitorGraphLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.GlobalMonitorGraphLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.GlobalMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.GlobalMonitorGraphLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.GlobalMonitorGraphController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.GlobalMonitorGraph) (*v3.GlobalMonitorGraph, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.GlobalMonitorGraph, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.GlobalMonitorGraph, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.GlobalMonitorGraphList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.GlobalMonitorGraph) (*v3.GlobalMonitorGraph, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGlobalMonitorGraphInterface in code that requires GlobalMonitorGraphInterface
//         // and then make assertions.
//
//     }
type GlobalMonitorGraphInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.GlobalMonitorGraphHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.GlobalMonitorGraphLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.GlobalMonitorGraphHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.GlobalMonitorGraphLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalMonitorGraphHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.GlobalMonitorGraphLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.GlobalMonitorGraphHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.GlobalMonitorGraphLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.GlobalMonitorGraphController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.GlobalMonitorGraph) (*v3.GlobalMonitorGraph, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.GlobalMonitorGraph, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.GlobalMonitorGraph, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.GlobalMonitorGraphList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.GlobalMonitorGraph) (*v3.GlobalMonitorGraph, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.GlobalMonitorGraphHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalMonitorGraphLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.GlobalMonitorGraphHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalMonitorGraphLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.GlobalMonitorGraphHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalMonitorGraphLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.GlobalMonitorGraphHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalMonitorGraphLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.GlobalMonitorGraph
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.GlobalMonitorGraph
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *GlobalMonitorGraphInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.GlobalMonitorGraphHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but GlobalMonitorGraphInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.GlobalMonitorGraphHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *GlobalMonitorGraphInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.GlobalMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.GlobalMonitorGraphHandlerFunc
	}
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *GlobalMonitorGraphInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.GlobalMonitorGraphLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but GlobalMonitorGraphInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalMonitorGraphLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *GlobalMonitorGraphInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.GlobalMonitorGraphLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalMonitorGraphLifecycle
	}
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *GlobalMonitorGraphInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.GlobalMonitorGraphHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.AddClusterScopedHandlerFunc: method is nil but GlobalMonitorGraphInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.GlobalMonitorGraphHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.AddClusterScopedHandlerCalls())
func (mock *GlobalMonitorGraphInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.GlobalMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.GlobalMonitorGraphHandlerFunc
	}
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *GlobalMonitorGraphInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.GlobalMonitorGraphLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but GlobalMonitorGraphInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalMonitorGraphLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.AddClusterScopedLifecycleCalls())
func (mock *GlobalMonitorGraphInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.GlobalMonitorGraphLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalMonitorGraphLifecycle
	}
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockGlobalMonitorGraphInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *GlobalMonitorGraphInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.GlobalMonitorGraphHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.AddFeatureHandlerFunc: method is nil but GlobalMonitorGraphInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalMonitorGraphHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockGlobalMonitorGraphInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockGlobalMonitorGraphInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.AddFeatureHandlerCalls())
func (mock *GlobalMonitorGraphInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.GlobalMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalMonitorGraphHandlerFunc
	}
	lockGlobalMonitorGraphInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockGlobalMonitorGraphInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *GlobalMonitorGraphInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.GlobalMonitorGraphLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.AddFeatureLifecycleFunc: method is nil but GlobalMonitorGraphInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.GlobalMonitorGraphLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockGlobalMonitorGraphInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockGlobalMonitorGraphInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.AddFeatureLifecycleCalls())
func (mock *GlobalMonitorGraphInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.GlobalMonitorGraphLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.GlobalMonitorGraphLifecycle
	}
	lockGlobalMonitorGraphInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockGlobalMonitorGraphInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *GlobalMonitorGraphInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.GlobalMonitorGraphHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.AddHandlerFunc: method is nil but GlobalMonitorGraphInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.GlobalMonitorGraphHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGlobalMonitorGraphInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockGlobalMonitorGraphInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.AddHandlerCalls())
func (mock *GlobalMonitorGraphInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.GlobalMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.GlobalMonitorGraphHandlerFunc
	}
	lockGlobalMonitorGraphInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockGlobalMonitorGraphInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *GlobalMonitorGraphInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.GlobalMonitorGraphLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.AddLifecycleFunc: method is nil but GlobalMonitorGraphInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.GlobalMonitorGraphLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockGlobalMonitorGraphInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockGlobalMonitorGraphInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.AddLifecycleCalls())
func (mock *GlobalMonitorGraphInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.GlobalMonitorGraphLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.GlobalMonitorGraphLifecycle
	}
	lockGlobalMonitorGraphInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockGlobalMonitorGraphInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *GlobalMonitorGraphInterfaceMock) Controller() v3.GlobalMonitorGraphController {
	if mock.ControllerFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.ControllerFunc: method is nil but GlobalMonitorGraphInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalMonitorGraphInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockGlobalMonitorGraphInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.ControllerCalls())
func (mock *GlobalMonitorGraphInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalMonitorGraphInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockGlobalMonitorGraphInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *GlobalMonitorGraphInterfaceMock) Create(in1 *v3.GlobalMonitorGraph) (*v3.GlobalMonitorGraph, error) {
	if mock.CreateFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.CreateFunc: method is nil but GlobalMonitorGraphInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.GlobalMonitorGraph
	}{
		In1: in1,
	}
	lockGlobalMonitorGraphInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGlobalMonitorGraphInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.CreateCalls())
func (mock *GlobalMonitorGraphInterfaceMock) CreateCalls() []struct {
	In1 *v3.GlobalMonitorGraph
} {
	var calls []struct {
		In1 *v3.GlobalMonitorGraph
	}
	lockGlobalMonitorGraphInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockGlobalMonitorGraphInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GlobalMonitorGraphInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.DeleteFunc: method is nil but GlobalMonitorGraphInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockGlobalMonitorGraphInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGlobalMonitorGraphInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.DeleteCalls())
func (mock *GlobalMonitorGraphInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockGlobalMonitorGraphInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockGlobalMonitorGraphInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *GlobalMonitorGraphInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.DeleteCollectionFunc: method is nil but GlobalMonitorGraphInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockGlobalMonitorGraphInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockGlobalMonitorGraphInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.DeleteCollectionCalls())
func (mock *GlobalMonitorGraphInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockGlobalMonitorGraphInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockGlobalMonitorGraphInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *GlobalMonitorGraphInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.DeleteNamespacedFunc: method is nil but GlobalMonitorGraphInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGlobalMonitorGraphInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockGlobalMonitorGraphInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.DeleteNamespacedCalls())
func (mock *GlobalMonitorGraphInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockGlobalMonitorGraphInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockGlobalMonitorGraphInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GlobalMonitorGraphInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.GlobalMonitorGraph, error) {
	if mock.GetFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.GetFunc: method is nil but GlobalMonitorGraphInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockGlobalMonitorGraphInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGlobalMonitorGraphInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.GetCalls())
func (mock *GlobalMonitorGraphInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockGlobalMonitorGraphInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockGlobalMonitorGraphInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *GlobalMonitorGraphInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.GlobalMonitorGraph, error) {
	if mock.GetNamespacedFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.GetNamespacedFunc: method is nil but GlobalMonitorGraphInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockGlobalMonitorGraphInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockGlobalMonitorGraphInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.GetNamespacedCalls())
func (mock *GlobalMonitorGraphInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockGlobalMonitorGraphInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockGlobalMonitorGraphInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GlobalMonitorGraphInterfaceMock) List(opts v1.ListOptions) (*v3.GlobalMonitorGraphList, error) {
	if mock.ListFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.ListFunc: method is nil but GlobalMonitorGraphInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockGlobalMonitorGraphInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGlobalMonitorGraphInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.ListCalls())
func (mock *GlobalMonitorGraphInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockGlobalMonitorGraphInterfaceMockList.RLock()
	calls = mock.calls.List
	lockGlobalMonitorGraphInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *GlobalMonitorGraphInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.ObjectClientFunc: method is nil but GlobalMonitorGraphInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalMonitorGraphInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockGlobalMonitorGraphInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.ObjectClientCalls())
func (mock *GlobalMonitorGraphInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalMonitorGraphInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockGlobalMonitorGraphInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GlobalMonitorGraphInterfaceMock) Update(in1 *v3.GlobalMonitorGraph) (*v3.GlobalMonitorGraph, error) {
	if mock.UpdateFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.UpdateFunc: method is nil but GlobalMonitorGraphInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.GlobalMonitorGraph
	}{
		In1: in1,
	}
	lockGlobalMonitorGraphInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGlobalMonitorGraphInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.UpdateCalls())
func (mock *GlobalMonitorGraphInterfaceMock) UpdateCalls() []struct {
	In1 *v3.GlobalMonitorGraph
} {
	var calls []struct {
		In1 *v3.GlobalMonitorGraph
	}
	lockGlobalMonitorGraphInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockGlobalMonitorGraphInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GlobalMonitorGraphInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GlobalMonitorGraphInterfaceMock.WatchFunc: method is nil but GlobalMonitorGraphInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockGlobalMonitorGraphInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGlobalMonitorGraphInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGlobalMonitorGraphInterface.WatchCalls())
func (mock *GlobalMonitorGraphInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockGlobalMonitorGraphInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockGlobalMonitorGraphInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockGlobalMonitorGraphsGetterMockGlobalMonitorGraphs sync.RWMutex
)

// Ensure, that GlobalMonitorGraphsGetterMock does implement GlobalMonitorGraphsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalMonitorGraphsGetter = &GlobalMonitorGraphsGetterMock{}

// GlobalMonitorGraphsGetterMock is a mock implementation of GlobalMonitorGraphsGetter.
//
//     func TestSomethingThatUsesGlobalMonitorGraphsGetter(t *testing.T) {
//
//         // make and configure a mocked GlobalMonitorGraphsGetter
//         mockedGlobalMonitorGraphsGetter := &GlobalMonitorGraphsGetterMock{
//             GlobalMonitorGraphsFunc: func(namespace string) v3.GlobalMonitorGraphInterface {
// 	               panic("mock out the GlobalMonitorGraphs method")
//             },
//         }
//
//         // use mockedGlobalMonitorGraphsGetter in code that requires GlobalMonitorGraphsGetter
//         // and then make assertions.
//
//     }
type GlobalMonitorGraphsGetterMock struct {
	// GlobalMonitorGraphsFunc mocks the GlobalMonitorGraphs method.
	GlobalMonitorGraphsFunc func(namespace string) v3.GlobalMonitorGraphInterface

	// calls tracks calls to the methods.
	calls struct {
		// GlobalMonitorGraphs holds details about calls to the GlobalMonitorGraphs method.
		GlobalMonitorGraphs []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// GlobalMonitorGraphs calls GlobalMonitorGraphsFunc.
func (mock *GlobalMonitorGraphsGetterMock) GlobalMonitorGraphs(namespace string) v3.GlobalMonitorGraphInterface {
	if mock.GlobalMonitorGraphsFunc == nil {
		panic("GlobalMonitorGraphsGetterMock.GlobalMonitorGraphsFunc: method is nil but GlobalMonitorGraphsGetter.GlobalMonitorGraphs was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockGlobalMonitorGraphsGetterMockGlobalMonitorGraphs.Lock()
	mock.calls.GlobalMonitorGraphs = append(mock.calls.GlobalMonitorGraphs, callInfo)
	lockGlobalMonitorGraphsGetterMockGlobalMonitorGraphs.Unlock()
	return mock.GlobalMonitorGraphsFunc(namespace)
}

// GlobalMonitorGraphsCalls gets all the calls that were made to GlobalMonitorGraphs.
// Check the length with:
//     len(mockedGlobalMonitorGraphsGetter.GlobalMonitorGraphsCalls())
func (mock *GlobalMonitorGraphsGetterMock) GlobalMonitorGraphsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockGlobalMonitorGraphsGetterMockGlobalMonitorGraphs.RLock()
	calls = mock.calls.GlobalMonitorGraphs
	lockGlobalMonitorGraphsGetterMockGlobalMonitorGraphs.RUnlock()
	return calls
}
